#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.36366
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MoeSto.DAC
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MoeSto")]
	public partial class DataAccessManagerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCompanies(Companies instance);
    partial void UpdateCompanies(Companies instance);
    partial void DeleteCompanies(Companies instance);
    partial void InsertImages(Images instance);
    partial void UpdateImages(Images instance);
    partial void DeleteImages(Images instance);
    partial void InsertCompanyDetails(CompanyDetails instance);
    partial void UpdateCompanyDetails(CompanyDetails instance);
    partial void DeleteCompanyDetails(CompanyDetails instance);
    #endregion
		
		public DataAccessManagerDataContext() : 
				base(global::MoeSto.DAC.Properties.Settings.Default.MoeStoConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataAccessManagerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataAccessManagerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataAccessManagerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataAccessManagerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Companies> Companies
		{
			get
			{
				return this.GetTable<Companies>();
			}
		}
		
		public System.Data.Linq.Table<Images> Images
		{
			get
			{
				return this.GetTable<Images>();
			}
		}
		
		public System.Data.Linq.Table<CompanyDetails> CompanyDetails
		{
			get
			{
				return this.GetTable<CompanyDetails>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetCompanyDetailsById", IsComposable=true)]
		public IQueryable<GetCompanyDetailsByIdResult1> GetCompanyDetailsById([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id)
		{
			return this.CreateMethodCallQuery<GetCompanyDetailsByIdResult1>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Companies")]
	public partial class Companies : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private double _Latitude;
		
		private double _Longitude;
		
		private EntityRef<CompanyDetails> _CompanyDetails;
        
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLatitudeChanging(double value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(double value);
    partial void OnLongitudeChanged();
    #endregion
		
		public Companies()
		{
			this._CompanyDetails = default(EntityRef<CompanyDetails>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float NOT NULL")]
		public double Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Float NOT NULL")]
		public double Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Companies_CompanyDetail", Storage="_CompanyDetails", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public CompanyDetails CompanyDetails
		{
			get
			{
				return this._CompanyDetails.Entity;
			}
			set
			{
				CompanyDetails previousValue = this._CompanyDetails.Entity;
				if (((previousValue != value) 
							|| (this._CompanyDetails.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyDetails.Entity = null;
						previousValue.Companies = null;
					}
					this._CompanyDetails.Entity = value;
					if ((value != null))
					{
						value.Companies = this;
					}
					this.SendPropertyChanged("CompanyDetails");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Images")]
	public partial class Images : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CompanyId;
		
		private System.Data.Linq.Binary _MainImage;
		
		private EntitySet<CompanyDetails> _CompanyDetails;
		
		private EntityRef<CompanyDetails> _CompanyDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnMainImageChanging(System.Data.Linq.Binary value);
    partial void OnMainImageChanged();
    #endregion
		
		public Images()
		{
			this._CompanyDetails = new EntitySet<CompanyDetails>(new Action<CompanyDetails>(this.attach_CompanyDetails), new Action<CompanyDetails>(this.detach_CompanyDetails));
			this._CompanyDetail = default(EntityRef<CompanyDetails>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="Int NOT NULL")]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._CompanyDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainImage", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary MainImage
		{
			get
			{
				return this._MainImage;
			}
			set
			{
				if ((this._MainImage != value))
				{
					this.OnMainImageChanging(value);
					this.SendPropertyChanging();
					this._MainImage = value;
					this.SendPropertyChanged("MainImage");
					this.OnMainImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Images_CompanyDetail", Storage="_CompanyDetails", ThisKey="Id", OtherKey="MainImageId")]
		public EntitySet<CompanyDetails> CompanyDetails
		{
			get
			{
				return this._CompanyDetails;
			}
			set
			{
				this._CompanyDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyDetail_Images", Storage="_CompanyDetail", ThisKey="CompanyId", OtherKey="Id", IsForeignKey=true)]
		public CompanyDetails CompanyDetail
		{
			get
			{
				return this._CompanyDetail.Entity;
			}
			set
			{
				CompanyDetails previousValue = this._CompanyDetail.Entity;
				if (((previousValue != value) 
							|| (this._CompanyDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyDetail.Entity = null;
						previousValue.Images.Remove(this);
					}
					this._CompanyDetail.Entity = value;
					if ((value != null))
					{
						value.Images.Add(this);
						this._CompanyId = value.Id;
					}
					else
					{
						this._CompanyId = default(int);
					}
					this.SendPropertyChanged("CompanyDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompanyDetails(CompanyDetails entity)
		{
			this.SendPropertyChanging();
			entity.Images2 = this;
		}
		
		private void detach_CompanyDetails(CompanyDetails entity)
		{
			this.SendPropertyChanging();
			entity.Images2 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompanyDetails")]
	public partial class CompanyDetails : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _Unp;
		
		private string _CatalogUrl;
		
		private string _Address;
		
		private string _Email;
		
		private string _Phones;
		
		private System.Nullable<bool> _FoundOnCardone;
		
		private string _CardoneStatus;
		
		private System.Nullable<int> _CardoneContractNo;
		
		private string _CardoneContractStatus;
		
		private double _Latitude;
		
		private double _Longitude;
		
		private System.Nullable<int> _MainImageId;
		
		private string _City;
		
		private EntitySet<Images> _Images;
		
		private EntityRef<Companies> _Companies;
		
		private EntityRef<Images> _Images2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUnpChanging(System.Nullable<int> value);
    partial void OnUnpChanged();
    partial void OnCatalogUrlChanging(string value);
    partial void OnCatalogUrlChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhonesChanging(string value);
    partial void OnPhonesChanged();
    partial void OnFoundOnCardoneChanging(System.Nullable<bool> value);
    partial void OnFoundOnCardoneChanged();
    partial void OnCardoneStatusChanging(string value);
    partial void OnCardoneStatusChanged();
    partial void OnCardoneContractNoChanging(System.Nullable<int> value);
    partial void OnCardoneContractNoChanged();
    partial void OnCardoneContractStatusChanging(string value);
    partial void OnCardoneContractStatusChanged();
    partial void OnLatitudeChanging(double value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(double value);
    partial void OnLongitudeChanged();
    partial void OnMainImageIdChanging(System.Nullable<int> value);
    partial void OnMainImageIdChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    #endregion
		
		public CompanyDetails()
		{
			this._Images = new EntitySet<Images>(new Action<Images>(this.attach_Images), new Action<Images>(this.detach_Images));
			this._Companies = default(EntityRef<Companies>);
			this._Images2 = default(EntityRef<Images>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._Companies.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unp", DbType="Int")]
		public System.Nullable<int> Unp
		{
			get
			{
				return this._Unp;
			}
			set
			{
				if ((this._Unp != value))
				{
					this.OnUnpChanging(value);
					this.SendPropertyChanging();
					this._Unp = value;
					this.SendPropertyChanged("Unp");
					this.OnUnpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatalogUrl", DbType="NVarChar(MAX)")]
		public string CatalogUrl
		{
			get
			{
				return this._CatalogUrl;
			}
			set
			{
				if ((this._CatalogUrl != value))
				{
					this.OnCatalogUrlChanging(value);
					this.SendPropertyChanging();
					this._CatalogUrl = value;
					this.SendPropertyChanged("CatalogUrl");
					this.OnCatalogUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(MAX)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phones", DbType="NVarChar(MAX)")]
		public string Phones
		{
			get
			{
				return this._Phones;
			}
			set
			{
				if ((this._Phones != value))
				{
					this.OnPhonesChanging(value);
					this.SendPropertyChanging();
					this._Phones = value;
					this.SendPropertyChanged("Phones");
					this.OnPhonesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoundOnCardone", DbType="Bit")]
		public System.Nullable<bool> FoundOnCardone
		{
			get
			{
				return this._FoundOnCardone;
			}
			set
			{
				if ((this._FoundOnCardone != value))
				{
					this.OnFoundOnCardoneChanging(value);
					this.SendPropertyChanging();
					this._FoundOnCardone = value;
					this.SendPropertyChanged("FoundOnCardone");
					this.OnFoundOnCardoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardoneStatus", DbType="NVarChar(MAX)")]
		public string CardoneStatus
		{
			get
			{
				return this._CardoneStatus;
			}
			set
			{
				if ((this._CardoneStatus != value))
				{
					this.OnCardoneStatusChanging(value);
					this.SendPropertyChanging();
					this._CardoneStatus = value;
					this.SendPropertyChanged("CardoneStatus");
					this.OnCardoneStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardoneContractNo", DbType="Int")]
		public System.Nullable<int> CardoneContractNo
		{
			get
			{
				return this._CardoneContractNo;
			}
			set
			{
				if ((this._CardoneContractNo != value))
				{
					this.OnCardoneContractNoChanging(value);
					this.SendPropertyChanging();
					this._CardoneContractNo = value;
					this.SendPropertyChanged("CardoneContractNo");
					this.OnCardoneContractNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardoneContractStatus", DbType="NVarChar(MAX)")]
		public string CardoneContractStatus
		{
			get
			{
				return this._CardoneContractStatus;
			}
			set
			{
				if ((this._CardoneContractStatus != value))
				{
					this.OnCardoneContractStatusChanging(value);
					this.SendPropertyChanging();
					this._CardoneContractStatus = value;
					this.SendPropertyChanged("CardoneContractStatus");
					this.OnCardoneContractStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float NOT NULL")]
		public double Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Float NOT NULL")]
		public double Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainImageId", DbType="Int")]
		public System.Nullable<int> MainImageId
		{
			get
			{
				return this._MainImageId;
			}
			set
			{
				if ((this._MainImageId != value))
				{
					if (this._Images2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMainImageIdChanging(value);
					this.SendPropertyChanging();
					this._MainImageId = value;
					this.SendPropertyChanged("MainImageId");
					this.OnMainImageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyDetail_Images", Storage="_Images", ThisKey="Id", OtherKey="CompanyId")]
		public EntitySet<Images> Images
		{
			get
			{
				return this._Images;
			}
			set
			{
				this._Images.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Companies_CompanyDetail", Storage="_Companies", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public Companies Companies
		{
			get
			{
				return this._Companies.Entity;
			}
			set
			{
				Companies previousValue = this._Companies.Entity;
				if (((previousValue != value) 
							|| (this._Companies.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Companies.Entity = null;
						previousValue.CompanyDetails = null;
					}
					this._Companies.Entity = value;
					if ((value != null))
					{
						value.CompanyDetails = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(int);
					}
					this.SendPropertyChanged("Companies");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Images_CompanyDetail", Storage="_Images2", ThisKey="MainImageId", OtherKey="Id", IsForeignKey=true)]
		public Images Images2
		{
			get
			{
				return this._Images2.Entity;
			}
			set
			{
				Images previousValue = this._Images2.Entity;
				if (((previousValue != value) 
							|| (this._Images2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Images2.Entity = null;
						previousValue.CompanyDetails.Remove(this);
					}
					this._Images2.Entity = value;
					if ((value != null))
					{
						value.CompanyDetails.Add(this);
						this._MainImageId = value.Id;
					}
					else
					{
						this._MainImageId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Images2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Images(Images entity)
		{
			this.SendPropertyChanging();
			entity.CompanyDetail = this;
		}
		
		private void detach_Images(Images entity)
		{
			this.SendPropertyChanging();
			entity.CompanyDetail = null;
		}
	}
	
	public partial class GetCompanyDetailsByIdResult1
	{
		
		private string _Name;
		
		private string _Address;
		
		private string _Email;
		
		private string _Phones;
		
		public GetCompanyDetailsByIdResult1()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this._Address = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(MAX)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this._Email = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phones", DbType="NVarChar(MAX)")]
		public string Phones
		{
			get
			{
				return this._Phones;
			}
			set
			{
				if ((this._Phones != value))
				{
					this._Phones = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
